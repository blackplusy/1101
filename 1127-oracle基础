1.SQL语句分类
	SQL：结构化查询语言
		DDL 数据库定义语言   create alter drop truncate
		DML 数据库操作语言   insert update delete
		DCL 数据库控制语言   grant revoke
		DQL 数据库查询语言   select
2.事务
	一件事有开始就一定要结束，DML语句会触发事务的开始，就一定要结束
	我------TEL-----地主家的傻儿子
	结束<------bank<----开始
	commit    提交数据到数据库中，除非人为修改否则不会变化
	rollback  当前数据库状态恢复到最后一次提交时候的状态
3.数据的新增
	字符类型加单引号
	数字类型直接使用
	日期类型使用to_date()函数
	新增数据的数据类型必须和列的数据类型一致
	create table user1 (
		name char(10),
		age  number,
		birth date
	);
	a.向表中指定列新增数据
	语法:insert into 表(列1,列2....) values(值1,值2.....);
		例子：向user1表中新增数据，名字为gaga，年龄为18
		insert into user1(name,age) values('gaga',18);
		commit;
	b.向表中所有列新增数据
	向表中新增数据时候注意顺序
	sysdate 系统当前时间
	语法:insert into 表 values(值1,值2....);
		例子：向user1表中新增数据，名字vava，年龄23,生日 2018-01-01
		insert into user1 values('vava',23,sysdate);
		insert into user1 values('vava',23,to_date('2018-01-01','YYYY-MM-DD'));
		commit;
4.数据的修改
	字符类型加单引号
	数字类型直接使用
	日期类型使用to_date()函数
	语法:update 表 set 列=值 where 条件;
	注意:如果不增加where条件，默认修改的是整个列的数据，如果增加的话是指定行的列
		例子:修改user1中名字是gaga的年龄为100
		update user1 set age=100 where name='gaga';
		commit;
		例子:修改所有人的年龄为0
		update user1 set age=0;
5.数据的删除
	a.delete    删除指定数据,删除数据可以找回，DML
		语法:delete [from] 表 where 条件;
		如果不加where条件删除的是表中所有数据，如果增加where条件删除的是指定数据
		例子:删除user1表中名字为vava的所有信息
			delete user1 where name='vava';
			commit;
		例子:删除user1表中所有数据
			delete user1;
	b.truncate  删除所有数据，删除数据无法找回，DDL,截断表
		语法:truncate table 表;
		例子:删除user1表中所有数据
			truncate table user1;


6.数据的查询(简单查询)
	数据查询可以查询指定行，查询指定列，查询指定行的列，查询所有信息
	语法:select 列 from 表 where 条件;
	select后面from前面是和列相关的
	where条件是和行相关
	emp表结构
		empno  员工号
		ename  员工名字
		job    职位
		mgr    上司的员工号
		hiredate 入职日期
		sal    工资
		comm   佣金
		deptno 部门号
	例子:查询emp表中所有的数据
	*是代表所有列
	select * from emp;
	select empno,ename,job,mgr,hiredate,sal,comm,deptno from emp;
	例子:查询名字是SCOTT的人的所有信息
	select * from emp where ename='SCOTT';
	例子:查询所有员工的名字
	select ename from emp;
	例子:查询名字为KING的人的工资
	select sal from emp where ename='KING';

7.where子句
	a.比较运算符
		>
		<
		=
		>=
		<=
		!=
		<>
		例子:查询emp表中工资高于3000的人的名字和工资
		select ename,sal from emp where sal>3000;
		例子:查询emp表中名字不是SCOTT的人的所有信息
		select * from emp where ename!='SCOTT';
		select * from emp where ename<>'SCOTT';
	b.逻辑运算符
		and  同时满足条件
		or   满足一个条件
		not  不满足条件
		例子:查询emp表中工资低于1600并且高于1200的所有信息
		select * from emp where sal<1600 and sal>1200;
		例子:查询emp表中名字为KING或者工资低于1500的所有信息
		select * from emp where ename='KING' or sal<1500;
	c.区间
		between..and...
		区间是包括两个端点
		例子:查询emp表中薪资范围是800和1600之间的所有信息
		select * from emp where sal>=800 and sal<=1600;
		select * from emp where sal between 800 and 1600;
	d.空值查询
		空是没有任何数据类型，没有任何值的,空值不能用于运算和比较，查询时候使用is null或者is not null
		null>null-1
		null=null
		例子:查询emp表中comm为空的所有数据
		select * from emp where comm is null;
		例子:查询emp表中comm为非空的所有数据
		select * from emp where comm is null;
		oracle中有对于空处理的函数nvl、nvl2，如果为空则显示成
		nvl(列，如果为空显示的值)
		例子:查询emp表中所有数据，如果comm为空则显示为0
		select e.*,nvl(e.comm,0) from emp e;
		select comm,nvl(comm,0) from emp;
	e.模糊查询
		当查询信息不完整的时候，使用模糊查询，一般来说是和字符类型一起使用
		like
		_      一个字符
		%      任意个字符
		例子:查询emp表中名字以S开头的所有信息
		select * from emp where ename like 'S%';
		例子:查询emp表中名字以T结尾的所有信息
		select * from emp where ename like '%T';
		例子:查询emp表中名字5个字符的所有信息
		select * from emp where ename like '_____';
	f.in查询
		in代表在。。。里面，或的关系，不是区间
		例子:查询emp表中名字是KING或者SCOTT的所有信息
		select * from emp where ename in ('KING','SCOTT');
	g.常用函数
		upper()      大写
		lower()      小写
		initcap()    首字母大写
		例子:查询emp表中所有员工名字,名字大写，小写，首字母大写
		select ename,lower(ename),initcap(ename),upper(lower(ename)) from emp;
		round()      小数点后保留几位
		avg()        平均
		例子:查看emp表中平均工资，小数点后保留2位
		select avg(sal),round(avg(sal),2) from emp
		distinct()   去重
		例子:查询emp表中有哪些职位
		select distinct(job) from emp;

8.排序
	顺序：从小到大
		order by 列 ;
		order by 列 asc;
	倒序：从大到小
		order by 列 desc;
	排序有单排序，多排序
	例子:查询emp表中所有数据，按照工资顺序排列
		select * from emp order by sal;
	例子:查询emp表中所有数据，按照工资倒序排列
		select * from emp order by sal desc;
	多排序例子:
		select * from emp order by  deptno,sal desc;

















